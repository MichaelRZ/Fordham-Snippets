Exponentiation by Squaring
==========================

"Exponentiation by squaring" is a fancy way of saying "fast power operations".
For example, for 2^10, two would need to be multiplied ten times.
With this algorithm, 2^10 turns into (2*2)^5, which turns into 4(4*4)^2,
then 4(16*16), giving our answer of 1024 in only four multiplications.
As the power gets larger, it becomes clearer why this method is faster,
given that multiplication is more computationaly expensive than other
operations.

The logic goes, for a number and a power:

* If the power is less than zero, return one over the number and make the power negative.
* If the power is zero, return the number one.
* Return the number if the power is one.
* If the number is even, square the number and half the power.
* If the number is odd, multiply by the number, subtract one from the power, and do the even operation.

* Repeat until the power is one.

You don't need to memorize this, of course, but it's simple enough for practice.

.. tabs::

   .. code-tab:: c++ C++

         #include <iostream>
         using namespace std;

         long long powers(long long num, long long pow){ // 1 time: 0.074 ms, input: 4,25, compile: 724 ms
             cout << num << " , " << pow << endl;        // 100 times: 1.783 ms, input: 4,25, compile: 721 ms
             if(pow < 0){
                 return powers(1 / num, -pow);
             }else if(pow == 0){
                 return 1;
             }else if(pow == 1){
                 return num;
             }else if(pow % 2 == 0){
                 return powers(num * num, pow / 2);
             }else{
                 return num * powers(num * num, (pow - 1) / 2);
             }
         }

   .. code-tab:: c# C#

         class Program
          {
             static long powers(long num, long pow){ //15.8162ms 4,25
             System.Console.WriteLine(num + " , " + pow);
             if(pow < 0){
                 return powers(1 / num, -pow);
             }else if(pow == 0){
                 return 1;
             }else if(pow == 1){
                 return num;
             }else if(pow % 2 == 0){
                 return powers(num * num, pow / 2);
             }else{
                 return num * powers(num * num, (pow - 1) / 2);
             }
         }
              static void Main(string[] args)
              {
                  System.Console.WriteLine(powers(4, 25));
              }
          }

   .. code-tab:: java Java

         public class powersRecursive {
             public static long powers(long num, long pow){ // 18ms 4,25 comp: 1385 ms
                 System.out.println(num + " , " + pow);     // 100 times: 49ms
                 if(pow < 0){
                     return powers(1 / num, -pow);
                 }else if(pow == 0){
                     return 1;
                 }else if(pow == 1){
                     return num;
                 }else if(pow % 2 == 0){
                     return powers(num * num, pow / 2);
                 }else{
                     return num * powers(num * num, (pow - 1) / 2);
                 }
               }
             public static void main(String[] args) {
                 System.out.println(powers(4, 25));
             }
         }

   .. code-tab:: javascript JavaScript

         function powers(num, pow) { //4.8499 ms 4,25 comp: 140 ms, 100 times: 21.08836
             console.log(num, pow);
             if(pow < 0){
                 return powers(1 / num, -pow);
             }else if(pow === 0){
                 return 1;
             }else if(pow === 1){
                 return num;
             }else if(pow % 2 === 0){
                 return powers(num * num, pow / 2);
             }else{
                 return num * powers(num * num, (pow - 1) / 2);
             }
         }

   .. code-tab:: python Python

         def power(num, pow): #1.49ms, 4,25, comp:52ms, 100:7.723ms
             print(num, pow)
             if pow < 0:
                 return power(1/num, -pow)
             elif pow == 0:
                 return 1
             elif pow == 1:
                 return num
             elif pow % 2 == 0:
                 return power(num*num, pow / 2)
             else:
                 return num*power(num*num, (pow - 1) / 2)
         print(power(4,25))

   .. code-tab:: swift Swift

         func powers(_ num: Int,_ pow: Int) -> Int { //0.401ms, 4,25, comp:1007ms, 100: 1.02ms
             print(num, pow)
             if pow < 0{
                 return powers(1/num, -pow)
             }else if pow == 0{
                 return 1
             }else if pow == 1{
                 return num
             }else if pow % 2 == 0{
                 return powers(num * num, pow / 2)
             }else{
                 return num * powers(num * num, (pow - 1) / 2)
             }
         }
         print(powers(4, 25))

Notes
`````

.. tabs::

   .. code-tab:: text C++

          "long long" here is a number type, just like "int", but it can store
          larger numbers.

   .. code-tab:: text C#

          Thankfully, they included outputs in C#.

   .. code-tab:: text Java

          Similar to the C# implementation.

   .. code-tab:: text JavaScript

          Short and sweet.

   .. code-tab:: text Python

          Already you can tell Python is going to take the least amount of effort.

   .. code-tab:: text Swift

          Swift's implementation is also short.
